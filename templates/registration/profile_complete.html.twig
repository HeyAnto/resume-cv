{% extends 'base.html.twig' %}

{% block title %}Resume.cv{% endblock %}

{% block main %}
{% include "_components/sidebar.html.twig" %}
<div class="main-content">
  {% include "_components/header-connection.html.twig" %}

  <section class="section-connection">
    <div class="container">
      {% for flash_error in app.flashes('error') %}
      <div class="alert alert-danger" role="alert">{{ flash_error }}</div>
      {% endfor %}

      {% for flash_success in app.flashes('success') %}
      <div class="alert alert-success" role="alert">{{ flash_success }}</div>
      {% endfor %}

      {{ form_start(profileForm) }}

      <div>
        <h1 class="text-h1">Complete your profile</h1>
        <p class="text-16 text-color-tertiary">Your email has been successfully verified!</p>
      </div>

      <div class="illustration">
        <img class="register-50" src="{{ asset('images/img-connection.webp') }}" alt="Creative Illustration">
        <p class="text-16 text-color-tertiary">Hannah Lee</p>
      </div>

      <div class="form-group">
        <label class="text-16 text-color-tertiary" for="{{ profileForm.username.vars.id }}">Username*</label>
        {{ form_widget(profileForm.username, {'attr': {'placeholder': 'johndoe', 'class': '', 'required': true}}) }}
        {{ form_errors(profileForm.username) }}
      </div>

      <div class="form-group">
        <div class="flex justify-between items-center">
          <label class="text-16 text-color-tertiary" for="{{ profileForm.displayName.vars.id }}">Display Name*</label>
          <p class="text-14 text-color-tertiary" id="displayName-counter">0 of 48</p>
        </div>
        {{ form_widget(profileForm.displayName, {'attr': {'placeholder': 'John Doe', 'class': '', 'required':
        true, 'data-counter': 'displayName-counter', 'data-max': '48'}}) }}
        {{ form_errors(profileForm.displayName) }}
      </div>

      <div class="form-group">
        <div class="flex justify-between items-center">
          <label class="text-16 text-color-tertiary" for="{{ profileForm.job.vars.id }}">What do you do?*</label>
          <p class="text-14 text-color-tertiary" id="job-counter">0 of 32</p>
        </div>
        {{ form_widget(profileForm.job, {'attr': {'placeholder': 'Architect, painter, etc', 'class': '',
        'required': true, 'data-counter': 'job-counter', 'data-max': '32'}}) }}
        {{ form_errors(profileForm.job) }}
      </div>

      <button type="submit" class="btn btn-primary-rounded">
        Complete my profile
      </button>

      {{ form_end(profileForm) }}
    </div>
  </section>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Function to update character counter
    function updateCounter(input) {
      const counterId = input.getAttribute('data-counter');
      const maxLength = parseInt(input.getAttribute('data-max'));
      const counter = document.getElementById(counterId);

      if (counter) {
        const currentLength = input.value.length;
        counter.textContent = `${currentLength} of ${maxLength}`;

        // Add visual feedback when approaching limit
        if (currentLength >= maxLength) {
          counter.style.color = '#ff6b6b'; // Red when at limit
          counter.style.fontWeight = 'bold';
        } else if (currentLength > maxLength * 0.9) {
          counter.style.color = '#ff6b6b'; // Red when close to limit
          counter.style.fontWeight = 'normal';
        } else if (currentLength > maxLength * 0.7) {
          counter.style.color = '#ffa726'; // Orange when getting close
          counter.style.fontWeight = 'normal';
        } else {
          counter.style.color = ''; // Default color
          counter.style.fontWeight = 'normal';
        }
      }
    }

    // Function to handle input and enforce max length
    function handleInput(input) {
      const maxLength = parseInt(input.getAttribute('data-max'));

      // If current length exceeds max, truncate to max length
      if (input.value.length > maxLength) {
        input.value = input.value.substring(0, maxLength);
      }

      updateCounter(input);
    }

    // Function to handle keypress and prevent typing when at limit
    function handleKeypress(e, input) {
      const maxLength = parseInt(input.getAttribute('data-max'));
      const currentLength = input.value.length;

      // Allow backspace, delete, arrow keys, tab, etc.
      const allowedKeys = [8, 9, 37, 38, 39, 40, 46]; // backspace, tab, arrows, delete

      if (allowedKeys.includes(e.keyCode) || e.ctrlKey || e.metaKey) {
        return true;
      }

      // Prevent typing if at max length
      if (currentLength >= maxLength) {
        e.preventDefault();
        return false;
      }

      return true;
    }

    // Function to handle paste events
    function handlePaste(e, input) {
      const maxLength = parseInt(input.getAttribute('data-max'));

      setTimeout(() => {
        if (input.value.length > maxLength) {
          input.value = input.value.substring(0, maxLength);
        }
        updateCounter(input);
      }, 10);
    }

    // Find all inputs with data-counter attribute
    const inputs = document.querySelectorAll('input[data-counter]');

    inputs.forEach(function (input) {
      // Set maxlength attribute as a fallback
      const maxLength = parseInt(input.getAttribute('data-max'));
      input.setAttribute('maxlength', maxLength);

      // Update counter on initial load
      updateCounter(input);

      // Handle input events
      input.addEventListener('input', function () {
        handleInput(this);
      });

      // Handle keypress to prevent typing at limit
      input.addEventListener('keypress', function (e) {
        handleKeypress(e, this);
      });

      // Handle paste events
      input.addEventListener('paste', function (e) {
        handlePaste(e, this);
      });
    });
  });
</script>
{% endblock %}